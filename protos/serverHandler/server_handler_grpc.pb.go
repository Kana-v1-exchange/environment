// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: server_handler.proto

package serverHandler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	SignIn(ctx context.Context, in *User, opts ...grpc.CallOption) (*DefaultStringMsg, error)
	SignUp(ctx context.Context, in *User, opts ...grpc.CallOption) (*DefaultStringMsg, error)
	GetAllCurrencies(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*GetCurrenciesResponse, error)
	BuyCurrency(ctx context.Context, in *SellOperation, opts ...grpc.CallOption) (*DefaultStringMsg, error)
	SellCurrency(ctx context.Context, in *SellOperation, opts ...grpc.CallOption) (*DefaultStringMsg, error)
	GetCurrencyValue(ctx context.Context, in *DefaultStringMsg, opts ...grpc.CallOption) (DashboardService_GetCurrencyValueClient, error)
	GetUserMoney(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*GetCurrenciesResponse, error)
	GetUserHistory(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*GetUserHistoryResponse, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) SignIn(ctx context.Context, in *User, opts ...grpc.CallOption) (*DefaultStringMsg, error) {
	out := new(DefaultStringMsg)
	err := c.cc.Invoke(ctx, "/serverHandler.DashboardService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) SignUp(ctx context.Context, in *User, opts ...grpc.CallOption) (*DefaultStringMsg, error) {
	out := new(DefaultStringMsg)
	err := c.cc.Invoke(ctx, "/serverHandler.DashboardService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetAllCurrencies(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*GetCurrenciesResponse, error) {
	out := new(GetCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/serverHandler.DashboardService/GetAllCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) BuyCurrency(ctx context.Context, in *SellOperation, opts ...grpc.CallOption) (*DefaultStringMsg, error) {
	out := new(DefaultStringMsg)
	err := c.cc.Invoke(ctx, "/serverHandler.DashboardService/BuyCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) SellCurrency(ctx context.Context, in *SellOperation, opts ...grpc.CallOption) (*DefaultStringMsg, error) {
	out := new(DefaultStringMsg)
	err := c.cc.Invoke(ctx, "/serverHandler.DashboardService/SellCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetCurrencyValue(ctx context.Context, in *DefaultStringMsg, opts ...grpc.CallOption) (DashboardService_GetCurrencyValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &DashboardService_ServiceDesc.Streams[0], "/serverHandler.DashboardService/GetCurrencyValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &dashboardServiceGetCurrencyValueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DashboardService_GetCurrencyValueClient interface {
	Recv() (*DefaultFloatMsg, error)
	grpc.ClientStream
}

type dashboardServiceGetCurrencyValueClient struct {
	grpc.ClientStream
}

func (x *dashboardServiceGetCurrencyValueClient) Recv() (*DefaultFloatMsg, error) {
	m := new(DefaultFloatMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dashboardServiceClient) GetUserMoney(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*GetCurrenciesResponse, error) {
	out := new(GetCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/serverHandler.DashboardService/GetUserMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetUserHistory(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*GetUserHistoryResponse, error) {
	out := new(GetUserHistoryResponse)
	err := c.cc.Invoke(ctx, "/serverHandler.DashboardService/GetUserHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility
type DashboardServiceServer interface {
	SignIn(context.Context, *User) (*DefaultStringMsg, error)
	SignUp(context.Context, *User) (*DefaultStringMsg, error)
	GetAllCurrencies(context.Context, *EmptyMsg) (*GetCurrenciesResponse, error)
	BuyCurrency(context.Context, *SellOperation) (*DefaultStringMsg, error)
	SellCurrency(context.Context, *SellOperation) (*DefaultStringMsg, error)
	GetCurrencyValue(*DefaultStringMsg, DashboardService_GetCurrencyValueServer) error
	GetUserMoney(context.Context, *EmptyMsg) (*GetCurrenciesResponse, error)
	GetUserHistory(context.Context, *EmptyMsg) (*GetUserHistoryResponse, error)
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServiceServer struct {
}

func (UnimplementedDashboardServiceServer) SignIn(context.Context, *User) (*DefaultStringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedDashboardServiceServer) SignUp(context.Context, *User) (*DefaultStringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedDashboardServiceServer) GetAllCurrencies(context.Context, *EmptyMsg) (*GetCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCurrencies not implemented")
}
func (UnimplementedDashboardServiceServer) BuyCurrency(context.Context, *SellOperation) (*DefaultStringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCurrency not implemented")
}
func (UnimplementedDashboardServiceServer) SellCurrency(context.Context, *SellOperation) (*DefaultStringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellCurrency not implemented")
}
func (UnimplementedDashboardServiceServer) GetCurrencyValue(*DefaultStringMsg, DashboardService_GetCurrencyValueServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCurrencyValue not implemented")
}
func (UnimplementedDashboardServiceServer) GetUserMoney(context.Context, *EmptyMsg) (*GetCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMoney not implemented")
}
func (UnimplementedDashboardServiceServer) GetUserHistory(context.Context, *EmptyMsg) (*GetUserHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserHistory not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverHandler.DashboardService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).SignIn(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverHandler.DashboardService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).SignUp(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetAllCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetAllCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverHandler.DashboardService/GetAllCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetAllCurrencies(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_BuyCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).BuyCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverHandler.DashboardService/BuyCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).BuyCurrency(ctx, req.(*SellOperation))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_SellCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).SellCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverHandler.DashboardService/SellCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).SellCurrency(ctx, req.(*SellOperation))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetCurrencyValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DefaultStringMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DashboardServiceServer).GetCurrencyValue(m, &dashboardServiceGetCurrencyValueServer{stream})
}

type DashboardService_GetCurrencyValueServer interface {
	Send(*DefaultFloatMsg) error
	grpc.ServerStream
}

type dashboardServiceGetCurrencyValueServer struct {
	grpc.ServerStream
}

func (x *dashboardServiceGetCurrencyValueServer) Send(m *DefaultFloatMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _DashboardService_GetUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverHandler.DashboardService/GetUserMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetUserMoney(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverHandler.DashboardService/GetUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetUserHistory(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverHandler.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _DashboardService_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _DashboardService_SignUp_Handler,
		},
		{
			MethodName: "GetAllCurrencies",
			Handler:    _DashboardService_GetAllCurrencies_Handler,
		},
		{
			MethodName: "BuyCurrency",
			Handler:    _DashboardService_BuyCurrency_Handler,
		},
		{
			MethodName: "SellCurrency",
			Handler:    _DashboardService_SellCurrency_Handler,
		},
		{
			MethodName: "GetUserMoney",
			Handler:    _DashboardService_GetUserMoney_Handler,
		},
		{
			MethodName: "GetUserHistory",
			Handler:    _DashboardService_GetUserHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCurrencyValue",
			Handler:       _DashboardService_GetCurrencyValue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server_handler.proto",
}
